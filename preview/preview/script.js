// События - взаимодействие пользователя со страницей. Оброботчик - это функция, которая срабатывает когда событие произошло
// Союытия выполняются по очереди всегда
// Первый способ назначения союытия - писать прямо в теге.(смотри хтмл код)

// Второй спопособ - использовать свойство DOM дерева.Нежелательно использовать такой вариант из за возможных проблем повтора и удаления

// const btn = document.querySelector("#btn");

// btn.onclick = function(){
//     alert("click");
// }

//Третий вариант

const btn = document.querySelector("#btn");
 
btn.addEventListener("click", () => { // первый аргумент указывает на действие, которое должно произойти, а второй назначает callback функцию, которая выполнит действие
    alert("click");
});

btn.addEventListener("click", () => { // callback функции лучше, потому что выполняются всегда одна за одной и не бдует удаления прошлой
    alert(" second click");
});

btn.addEventListener("mouseenter", () => { // mouseenter срабатывает при наведении мыши на элемент
    console.log("HOVEEER");
});

btn.addEventListener("mouseenter", (e) => { // e - Event. Это обьект событий и он передается как ПЕРВЫЙ АРГУМЕНТ в коллбек функцию. Название может быть любое.
    console.log(e); // сделано для того, что если нужно получить какие либо данные о событии. Важные свойства: TARGET, TYPE
    console.log("HOVEEER");
    //e.target.remove(); // мы можем через event обращаться к элементу и применять к нему любые методы по удалению или изменению
});
//////////////////////////////////////\
const deleteElement = (e) => { // создаем переменную и помещаем в нее функцию удаления элемента с помощью данных о собтий указывая элемент
    e.target.remove();
}

btn.addEventListener("click", deleteElement); // тут мы берем сам элемент, указываем первый аргумент название действия, а второй то что произойдет после этого действия
btn.removeEventListener("click", deleteElement);// в таком случае - выше мы назначили обработчик, а removeEvent его сразу же удаляет и событие не произойдет

const overlay = document.querySelector(".overlay");

const deleteElement2 = (e) => { // создаем переменную и помещаем в нее функцию удаления элемента с помощью данных о собтий указывая элемент
    // console.log(e.target);
    console.log(e.currentTarget);
     console.log(e.type);
}
btn.addEventListener // тут мы берем сам элемент, указываем первый аргумент название действия, а второй то что произойдет после этого действия
overlay.addEventListener("click", deleteElement2); // всплытие событий = сначала покажет сам элемент, а потом в чем он содержится.Иерархия

btn.forEach(btns => { // ПРИМЕР КОДА, ЕСЛИ НУЖНО НАВЕШИВАТЬ ОДНО СОБЫТИЕ НА НЕСКОЛЬКО ИЛИ ВСЕ ЭЕЛЕМЕНТЫ.
   btns.addEventListener("click", deleteElement2, {once: true}); // ПЕРЕБОР МАССИВА И НАЗНАЧЕНИЕ СОБЫТИЯ
}) // {once: true} у событий есть третий аргумент - ОПЦИЯ. ТО есть можно сказать сколько раз событие будет выполняться. {once: true} - один раз

//////////////////////////////////

const link = document.querySelector("a");

link.addEventListener("click", (e) => {
   e.preventDefault(); // отменяет стандартное поведение браузера. Помещается всегда в самом вперху кода. В данном случае автомат. переход по ссылке
   console.log("perehod");
});

